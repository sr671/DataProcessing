%CalcStrainsCMH calcualted strains ready for plotting. Other other methods
%were bizarely convuluted so this should be a simple way for dynamic data.

% 140731 SR: change 01 - save the remeshed xy data (xydata_new)
% 1400802 SR: change 02 - find and save the nbr of patches per row

function CalcStrainsCMH_sr01(xysoildata,frame1,frame2, grid_step, interp, name, TunRad)

%xysoildata is calibrated soil deformation data
%frame1, frame2 is the range of frames you might ever be interested in
%grid_step is the size of the patches for the remesh (in mm) = 2??
%interp is interp method to be used: 'linear'
%name referring to mesh being processed
%TunRad = radius of the tunnel, defines the area where the data of the
%new grid is removed


%%%1. Cut data down to time frame of interest
data = xysoildata(:,[1,frame1+1:frame2+1],:);

%%%2. Re-mesh the data
x1=data(:,2:end,1);   %get raw data x
y1=data(:,2:end,2);   %get raw data y
nn_rows=size(x1,1);         %number of patches
nn_cols=size(x1,2);         %number of frames

%SR, 150125 - shift the raw data corresponding to the position of the
%tunnel centreline
x1=x1-136.984;
y1=y1+179.057;

dx=zeros(nn_rows,nn_cols);  %initialise dx
dy=dx;                      %initialise dy

dx = bsxfun(@minus,x1,x1(:,1)); %find the relative x movements from frame1
dy = bsxfun(@minus,y1,y1(:,1)); %find the relative y movements from frame1

xx1=floor(min(min(x1)))-mod(floor(min(min(x1))),-grid_step);    %find the limits of new mesh
xx2=ceil(max(max(x1)))-mod(ceil(max(max(x1))),grid_step);
yy1=floor(min(min(y1)))-mod(floor(min(min(y1))),grid_step);
yy2=ceil(max(max(y1)))-mod(ceil(max(max(y1))),grid_step);

[XI,YI]=meshgrid(xx1:grid_step:xx2,yy1:grid_step:yy2);  %set up new mesh (NEED TO BE MADE MORE EFFICIENT)
for i=1:size(dx,2)                                     %calc new grid for each frame
    X=x1(:,i);                                         %current x posn
    Y=y1(:,i);                                         %current y posn
    Z=dx(:,i);                                         %change in x posn
    ZI{i}=griddata(X,Y,Z,XI,YI,interp);                %find new values for x
    Z=dy(:,i);                                         %change in y posn
    ZII{i}=griddata(X,Y,Z,XI,YI,interp);               %find new values for y  
end
x_new=XI;       %the x-coordinates of the new mesh
y_new=YI;       %the y-coordinates of the new mesh
dx_new=ZI;      %the dx at each point within the new mesh
dy_new=ZII;     %the dy at each point within the new mesh


% SR, 150125 : Remove the information within the area of the tunnel

nn_NewMesh_rows = size(x_new,1);
nn_NewMesh_cols = size(x_new,2);

dx_NewNew = cell(dx_new);   % initialise the new cell containing the dx data
dy_NewNew = dx_NewNew;      % initialise the new cell containing the dy data

% loop removing the elements which are within the tunnel area
for i=1:nn_NewMesh_rows
	for j=1:nn_NewMesh_cols
		for k = 1 : size(dx_NewNew,2)
			if sqrt((x_new(i,j))^2+(152-abs(y_new(i,j)))^2) > TunRad % if outside of tunnel area
				dx_NewNew{k}(i,j) = dx_new{k}(i,j);
				dy_NewNew{k}(i,j) = dy_new{k}(i,j);	
			else
				dx_NewNew{k}(i,j) = NaN;
				dy_NewNew{k}(i,j) = NaN;
                %counter(:)=k;
			end	
		end	
	end	
end

for i=1:size(dx_NewNew,2) %remove NaNs from data
    dx_NewNew{i}(isnan(dx_NewNew{i})) = 0;
    dy_NewNew{i}(isnan(dy_NewNew{i})) = 0;
end;


%%%3. Rebuild xy data array from new mesh data
nn_rows=size(x_new,1)*size(x_new,2);            %find number of rows required (number of patches)
xydata_new=zeros(nn_rows,size(dx_NewNew,2)+1,2);   %initialise new array matrix
xydata_new(:,1,1)=1:nn_rows;                    %enter patch number for x
xydata_new(:,1,2)=xydata_new(:,1,1);            %enter patch number for y
 
var=x_new(:,:);                                 %x-coords patches
xx=reshape(var',nn_rows,1);                     %for single column of starting x-coords for all patches
 
var=y_new(:,:);                                 %y-coords patches
yy=reshape(var',nn_rows,1);                     %for single column of starting y-coords for all patches
 
xydata_new(:,2,1)=xx;
xydata_new(:,2,2)=yy;
 
for i=1:size(dx_NewNew,2)
    var=dx_NewNew{i}(:,:);                         %get remeshed x data for first frame interation
    dx=reshape(var',size(var,1)*size(var,2),1); %reshape that data into single column
 
    var=dy_NewNew{i}(:,:);                         %get remeshed y data for first frame interation
    dy=reshape(var',size(var,1)*size(var,2),1); %reshape that data into single column
 
    xydata_new(:,i+1,1)=xydata_new(:,2,1)+dx;   %determine releveant new x-coord for each point
    xydata_new(:,i+1,2)=xydata_new(:,2,2)+dy;   %determine releveant new y-coord for each point
end

%SR, 1501258: remove the deformation vectors which are zero
[a,b,c] = size(xydata_new);
wilddata = xydata_new;

for i=1:a
if xydata_new(i,2,1) == xydata_new(i,3,1)       % if condition to remove the data within the tunnel area
wilddata(i,:,:) = ([NaN]);                      % 
end
end

xy_unwild = reshape(wilddata(~isnan(wilddata)),[],size(wilddata,2),size(wilddata,3));

%for j=1:size(xy_unwild,1)
%    xy_unwild(j,1)=j;
%end


%xydata_new = wilddata;
save([name,'xy_unwild'],'xy_unwild'); %SR: saves the data after removing unreliable areas of the interpolation (tunnel and surface rows)
save([name,'xydata_new'],'xydata_new'); %SR: saves the new xydata
save([name,'wilddata'],'wilddata'); %SR: saves the wilddata

 
%%%SR: output of the number of patches per row
nn_PatchesPerRow = size(x_new,2);               %find the nbr of patches per row
save([name,'nn_PatchesPerRow'],'nn_PatchesPerRow'); %SR: saves the new xydata

%*******************************************************************************
%%%4. Create new elements file
num_rows=size(x_new,1); %number of rows in new mesh
num_cols=size(x_new,2); %number of columns in new mesh
ele=zeros(2*((num_rows-1)*(num_cols-1)),7); %initalise elements matrix
ele_n=1;
ele_col=1;
ele_row=1;

for j=1:num_rows-1 %set up elements array
    for aa=1:2      
        for i=1:num_cols-1
            ele(ele_n,1)=ele_n;
            ele(ele_n,3)=ele_row;
            ele(ele_n,4)=ele_col;
            if aa==1
                ele(ele_n,2)=0;  
                ele(ele_n,5)=(j-1)*num_cols+i;
                ele(ele_n,6)=(j-1)*num_cols+i+1;
                ele(ele_n,7)=(j)*num_cols+i+1;
            else
                ele(ele_n,2)=1;
                ele(ele_n,5)=(j-1)*num_cols+i;
                ele(ele_n,6)=(j)*num_cols+i+1;
                ele(ele_n,7)=(j)*num_cols+i;
            end
            ele_row=ele_row+1;            
            ele_n=ele_n+1;
        end
        ele_col=ele_col+1;
    end
end


%SR, 150126 remove the strain elements which are related to one of the
%strains in the tunnel area or close to the soil surface

%01: find the patches which are not reliable (tunnel area, soil surface)
for i=1:size(wilddata,1)
	if isnan(wilddata(i,1,1))
		counter(i,1)=i;
	else
		counter(i,1)=NaN;	
	end

end

FalsePatches = reshape(counter(~isnan(counter)),[],size(counter,2),size(counter,3)); % stores unreliabel patch nbrs
save([name,'FalsePatches'],'FalsePatches'); %SR: saves the unreliable patches

ele_new = ele;

% NaN for the rows which contain patches that are unreliable
for i=1:size(ele,1)
	for k=1:size(FalsePatches,1)
		if ele(i,5)==FalsePatches(k,1) | ele(i,6)==FalsePatches(k,1) | ele(i,7)==FalsePatches(k,1)
			ele_new(i,:)=NaN;
		end
	end
end

ele_new(any(isnan(ele_new),2),:)=[];	% remove rows containing Nan


% assign new element numbers starting with 1
for i=1:size(ele_new,1);
	ele_new(i,1) = i;
end

save([name,'ele_new'],'ele_new'); %SR: saves the wilddata
dlmwrite([name,'strain_elements.txt'],ele, 'delimiter', ' ');
dlmwrite([name,'strain_elements_new.txt'],ele_new, 'delimiter', ' ');
